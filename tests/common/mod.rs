macro_rules! C {
    (NaN, NaN) => {
        C!(f64::NAN, f64::NAN)
    };
    (NaN, Inf) => {
        C!(f64::NAN, f64::INFINITY)
    };
    (Inf, NaN) => {
        C!(f64::INFINITY, f64::NAN)
    };
    (Inf, Inf) => {
        C!(f64::INFINITY, f64::INFINITY)
    };
    (Inf, -Inf) => {
        C!(f64::INFINITY, f64::NEG_INFINITY)
    };
    (-Inf, Inf) => {
        C!(f64::NEG_INFINITY, f64::INFINITY)
    };
    (-Inf, -Inf) => {
        C!(f64::NEG_INFINITY, f64::NEG_INFINITY)
    };
    (NaN, $im: expr) => {
        C!(f64::NAN, $im)
    };
    (Inf, $im: expr) => {
        C!(f64::INFINITY, $im)
    };
    (-Inf, $im: expr) => {
        C!(f64::NEG_INFINITY, $im)
    };
    ($re:expr, NaN) => {
        C!($re, f64::NAN)
    };
    ($re:expr, Inf) => {
        C!($re, f64::INFINITY)
    };
    ($re: expr, -Inf) => {
        C!($re, f64::NEG_INFINITY)
    };
    ($re: expr, $im: expr) => {
        C!($re, $im,)
    };
    ($re: expr, $im: expr,) => {
        ::num_complex::Complex64 {
            re: $re as f64,
            im: $im as f64,
        }
    };
}
use faddeeva::Complex64;
pub(crate) use C;

pub(crate) fn rel_err(a: f64, b: f64) -> f64 {
    if a.is_nan() || b.is_nan() || a.is_infinite() || b.is_infinite() {
        if (a.is_nan() && !b.is_nan())
            || (!a.is_nan() && b.is_nan())
            || (a.is_infinite() && !b.is_infinite())
            || (!a.is_infinite() && b.is_infinite())
            || (a.is_infinite() && b.is_infinite() && a * b < 0.0)
        {
            return f64::INFINITY; // "infinite" error
        }
        return 0.0; // matching infinity/nan results counted as zero error
    }
    if a == 0.0 {
        if b == 0.0 {
            0.0
        } else {
            f64::INFINITY
        }
    } else {
        ((b - a) / a).abs()
    }
}

/// (z[i], w(z[i])), Computed with WolframAlpha
/// # Note
/// WolframAlpha is problematic some of the inputs, so I had to use the
/// continued-fraction expansion in WolframAlpha in some cases, or switch to
/// Maple
pub(crate) const W: &[(Complex64, Complex64)] = &[
    (
        C!(624.2, -0.26123),
        C!(-3.782_702_455_189_805_3e-7, 0.000_903_861_276_433_172_1,),
    ),
    (
        C!(-0.4, 3.),
        C!(0.176_490_622_700_481_7, -0.021_465_505_394_684_576,),
    ),
    (
        C!(0.6, 2.),
        C!(0.241_025_071_577_269_2, 0.060_875_796_634_280_895,),
    ),
    (
        C!(-1., 1.),
        C!(0.304_744_205_256_912_6, -0.208_218_938_202_831_63,),
    ),
    (
        C!(-1., -9.),
        C!(7.317_131_068_972_378e34, 8.321_873_499_714_403e34,),
    ),
    (
        C!(-1., 9.),
        C!(0.061_569_850_723_632_37, -0.006_760_057_837_165_75,),
    ),
    (
        C!(-0.0000000234545, 1.1234),
        C!(0.396_079_300_769_987_5, -5.593_152_259_116_645e-9,),
    ),
    (
        C!(-3., 5.1),
        C!(0.082_171_992_267_394_48, -0.047_012_910_876_436_1,),
    ),
    (
        C!(-53, 30.1),
        C!(0.004_572_460_003_502_816_5, -0.008_049_007_914_116_918,),
    ),
    (C!(0.0, 0.12345), C!(0.874_634_285_960_805_3, 0.)),
    (
        C!(11, 1),
        C!(0.004_681_901_649_654_442, 0.051_073_556_390_130_62,),
    ),
    (
        C!(-22, -2),
        C!(-0.002_319_317_520_018_762, -0.025_460_054_739_731_557,),
    ),
    (
        C!(9, -28),
        C!(9.114_633_684_056_372e304, 3.971_018_071_452_634e305,),
    ),
    (
        C!(21, -33),
        C!(-4.492_720_785_771_56e281, -2.801_959_121_342_307_8e281,),
    ),
    (
        C!(1e5, 1e5),
        C!(2.820_947_917_809_305_3e-6, 2.820_947_917_668_257_8e-6,),
    ),
    (
        C!(1e14, 1e14),
        C!(2.820_947_917_738_781_3e-15, 2.820_947_917_738_781_3e-15,),
    ),
    (
        C!(-3001, -1000),
        C!(-0.000_056_385_128_969_624_43, -0.000_169_211_755_126_812_18,),
    ),
    (
        C!(1e160, -1e159),
        C!(-5.586_035_480_670_854e-162, 5.586_035_480_670_854_5e-161,),
    ),
    (
        C!(-6.01, 0.01),
        C!(0.000_163_183_251_371_404_53, -0.095_232_456_573_009_29,),
    ),
    (
        C!(-0.7, -0.7),
        C!(0.695_047_536_784_069_4, -1.891_641_117_110_364,),
    ),
    (
        C!(2.611_78e1, 4.540_909_610_972_489e3),
        C!(0.000_124_241_826_965_327_95, 7.145_975_826_320_187e-7,),
    ),
    (
        C!(0.8e7, 0.3e7),
        C!(2.318_587_329_648_353_4e-8, 6.182_899_545_728_858e-8,),
    ),
    (
        C!(-20, -19.8081),
        C!(-0.013_342_687_724_350_603, -0.014_808_709_714_322_077,),
    ),
    (
        C!(1e-16, -1.1e-16),
        C!(1.000_000_000_000_000_2, 1.128_379_167_095_512_7e-16,),
    ),
    (
        C!(2.3e-8, 1.3e-8),
        C!(0.999_999_985_331_070_5, 2.595_272_024_519_679e-8,),
    ),
    (
        C!(6.3, -1e-13),
        C!(-1.473_142_179_563_827_9e-15, 0.090_727_659_684_127_37,),
    ),
    (
        C!(6.3, 1e-20),
        C!(5.792_460_778_844_103e-18, 0.090_727_659_684_127_37,),
    ),
    (
        C!(1e-20, 6.3),
        C!(0.088_465_899_352_852_19, 1.370_883_524_957_491_3e-22,),
    ),
    (
        C!(1e-20, 16.3),
        C!(0.034_548_084_541_919_044, 2.111_611_028_951_790_5e-23,),
    ),
    (
        C!(9, 1e-300),
        C!(6.639_677_199_580_735e-36, 0.063_082_090_059_258_29,),
    ),
    (
        C!(6.01, 0.11),
        C!(0.001_794_352_332_087_026_4, 0.095_198_381_480_527_06,),
    ),
    (
        C!(8.01, 1.01e-10),
        C!(9.097_603_771_020_98e-13, 0.070_997_921_072_513_86,),
    ),
    (
        C!(28.01, 1e-300),
        C!(7.204_951_027_974_216e-304, 0.020_155_295_647_952_695,),
    ),
    (
        C!(10.01, 1e-200),
        C!(3.045_436_046_522_507_5e-44, 0.056_648_165_176_067_5,),
    ),
    (
        C!(10.01, -1e-200),
        C!(3.045_436_046_522_507_5e-44, 0.056_648_165_176_067_5,),
    ),
    (
        C!(10.01, 0.99e-10),
        C!(5.659_928_732_065_274e-13, 0.056_648_165_176_067_5,),
    ),
    (
        C!(10.01, -0.99e-10),
        C!(-5.659_928_732_065_274e-13, 0.056_648_165_176_067_5,),
    ),
    (
        C!(1e-20, 7.01),
        C!(0.079_688_425_172_165_22, 1.114_744_618_175_616_7e-22,),
    ),
    (
        C!(-1, 7.01),
        C!(0.078_171_958_212_473_58, -0.010_939_136_701_035_766,),
    ),
    (
        C!(5.99, 7.01),
        C!(0.046_700_329_809_904_496, 0.039_440_389_619_335_34,),
    ),
    (
        C!(1, 0),
        C!(0.367_879_441_171_442_33, 0.607_157_705_841_393_7,),
    ),
    (C!(55, 0), C!(0, 0.010_259_688_805_536_831)),
    (
        C!(-0.1, 0),
        C!(0.990_049_833_749_168_1, -0.112_088_664_364_495_38,),
    ),
    (
        C!(1e-20, 0),
        C!(
            0.99999999999999999999999999999999999999990000,
            1.128_379_167_095_512_5e-20,
        ),
    ),
    (C!(0, 5e-14), C!(0.999_999_999_999_943_6, 0)),
    (C!(0, 51), C!(0.011_060_415_485_327_72, 0)),
    (C!(Inf, 0), C!(0, 0)),
    (C!(-Inf, 0), C!(0, 0)),
    (C!(0, Inf), C!(0, 0)),
    (C!(0, -Inf), C!(Inf, 0)),
    (C!(Inf, Inf), C!(0, 0)),
    (C!(Inf, -Inf), C!(NaN, NaN)),
    (C!(NaN, NaN), C!(NaN, NaN)),
    (C!(NaN, 0), C!(NaN, NaN)),
    (C!(0, NaN), C!(NaN, 0)),
    (C!(NaN, Inf), C!(NaN, NaN)),
    (C!(Inf, NaN), C!(NaN, NaN)),
];

/// (z[i], erf(z[i])), evaluated with Maple
pub(crate) const ERF: &[(Complex64, Complex64)] = &[
    (C!(1, 2), C!(-0.536_643_565_778_565, -5.049_143_703_447_035)),
    (C!(-1, 2), C!(0.536_643_565_778_565, -5.049_143_703_447_035)),
    (C!(1, -2), C!(-0.536_643_565_778_565, 5.049_143_703_447_035)),
    (C!(-1, -2), C!(0.536_643_565_778_565, 5.049_143_703_447_035)),
    (
        C!(9, -28),
        C!(3.359_473_673_830_577e303, -1.999_896_139_679_880_8e303),
    ),
    (
        C!(21, -33),
        C!(3.584_459_971_462_946e277, 3.818_954_885_257_184e279),
    ),
    (
        C!(1e3, 1e3),
        C!(0.999_602_042_265_714_9, 0.000_028_010_441_169_082_28),
    ),
    (C!(-3001, -1000), C!(-1, 0)),
    (C!(1e160, -1e159), C!(1, 0)),
    (
        C!(5.1e-3, 1e-8),
        C!(0.005_754_683_859_034_8, 1.128_349_818_335_058_7e-8),
    ),
    (
        C!(-4.9e-3, 4.95e-3),
        C!(-0.005_529_149_142_341_821, 0.005_585_388_387_864_707),
    ),
    (
        C!(4.9e-3, 0.5),
        C!(0.007_099_365_669_981_359, 0.614_934_701_285_421_2),
    ),
    (
        C!(4.9e-4, -0.5e1),
        C!(3.981_176_338_702_323e7, -8.298_176_341_665_249e9),
    ),
    (C!(-4.9e-5, -0.5e2), C!(-Inf, -Inf)),
    (
        C!(5.1e-3, 0.5),
        C!(0.007_389_128_308_257_135, 0.614_933_252_460_165_8),
    ),
    (
        C!(5.1e-4, -0.5e1),
        C!(4.143_671_923_267_934_5e7, -8.298_168_216_818_315e9),
    ),
    (C!(-5.1e-5, -0.5e2), C!(-Inf, -Inf)),
    (
        C!(1e-6, 2e-6),
        C!(1.128_379_167_099_65e-6, 2.256_758_334_191_777_6e-6),
    ),
    (C!(0, 2e-6), C!(0, 2.256_758_334_194_034e-6)),
    (C!(0, 2), C!(0, 18.564_802_414_575_553)),
    (C!(0, 20), C!(0, 1.474_797_539_628_786_2e172)),
    (C!(0, 200), C!(0, Inf)),
    (C!(Inf, 0), C!(1, 0)),
    (C!(-Inf, 0), C!(-1, 0)),
    (C!(0, Inf), C!(0, Inf)),
    (C!(0, -Inf), C!(0, -Inf)),
    (C!(Inf, Inf), C!(NaN, NaN)),
    (C!(Inf, -Inf), C!(NaN, NaN)),
    (C!(NaN, NaN), C!(NaN, NaN)),
    (C!(NaN, 0), C!(NaN, 0)),
    (C!(0, NaN), C!(0, NaN)),
    (C!(NaN, Inf), C!(NaN, NaN)),
    (C!(Inf, NaN), C!(NaN, NaN)),
    (C!(1e-3, NaN), C!(NaN, NaN)),
    (
        C!(7e-2, 7e-2),
        C!(0.079_243_804_046_157_83, 0.078_727_762_180_466_81),
    ),
    (
        C!(7e-2, -7e-4),
        C!(0.078_857_758_285_122_77, -0.000_786_004_670_411_822_4),
    ),
    (
        C!(-9e-2, 7e-4),
        C!(-0.101_280_643_274_719_89, 0.000_783_493_474_702_203_6),
    ),
    (
        C!(-9e-2, 9e-2),
        C!(-0.102_099_841_879_809_79, 0.101_003_077_889_231_09),
    ),
    (
        C!(-7e-4, 9e-2),
        C!(-0.000_796_289_176_314_790_8, 0.101_828_938_593_627_82),
    ),
    (
        C!(7e-2, 0.9e-2),
        C!(0.078_864_086_664_704_79, 0.010_106_042_887_808_69),
    ),
    (
        C!(7e-2, 1.1e-2),
        C!(0.078_867_230_999_402_6, 0.012_351_993_278_732_583),
    ),
];

/// (z[i], erfc(z[i])), evaluated with Maple
pub(crate) const ERFC: &[(Complex64, Complex64)] = &[
    (C!(1, 2), C!(1.536_643_565_778_565, 5.049_143_703_447_035,)),
    (
        C!(-1, 2),
        C!(0.463_356_434_221_434_97, 5.049_143_703_447_035,),
    ),
    (
        C!(1, -2),
        C!(1.536_643_565_778_565, -5.049_143_703_447_035,),
    ),
    (
        C!(-1, -2),
        C!(0.463_356_434_221_434_97, -5.049_143_703_447_035,),
    ),
    (
        C!(9, -28),
        C!(-3.359_473_673_830_577e303, 1.999_896_139_679_880_8e303,),
    ),
    (
        C!(21, -33),
        C!(-3.584_459_971_462_946e277, -3.818_954_885_257_184e279,),
    ),
    (
        C!(1e3, 1e3),
        C!(0.000_397_957_734_285_136_1, -0.000_028_010_441_169_082_28,),
    ),
    (C!(-3001, -1000), C!(2, 0)),
    (C!(1e160, -1e159), C!(0, 0)),
    (
        C!(5.1e-3, 1e-8),
        C!(0.994_245_316_140_965_2, -1.128_349_818_335_058_7e-8,),
    ),
    (C!(0, 2e-6), C!(1, -2.256_758_334_194_034e-6)),
    (C!(0, 2), C!(1, -18.564_802_414_575_553)),
    (C!(0, 20), C!(1, -1.474_797_539_628_786_2e172)),
    (C!(0, 200), C!(1, -Inf)),
    (C!(2e-6, 0), C!(0.999_997_743_241_665_8, 0)),
    (C!(2, 0), C!(0.004_677_734_981_047_266, 0)),
    (C!(20, 0), C!(5.395_865_611_607_901e-176, 0)),
    (C!(200, 0), C!(0, 0)),
    (C!(Inf, 0), C!(0, 0)),
    (C!(-Inf, 0), C!(2, 0)),
    (C!(0, Inf), C!(1, -Inf)),
    (C!(0, -Inf), C!(1, Inf)),
    (C!(Inf, Inf), C!(NaN, NaN)),
    (C!(Inf, -Inf), C!(NaN, NaN)),
    (C!(NaN, NaN), C!(NaN, NaN)),
    (C!(NaN, 0), C!(NaN, 0)),
    (C!(0, NaN), C!(1, NaN)),
    (C!(NaN, Inf), C!(NaN, NaN)),
    (C!(Inf, NaN), C!(NaN, NaN)),
    (C!(88, 0), C!(0, 0)),
];

/// (z[i], dawson(z[i])), evaluated with Maple
pub(crate) const DAWSON: &[(Complex64, Complex64)] = &[
    (
        C!(2, 1),
        C!(0.163_539_409_434_535_57, -0.153_124_575_537_122_97,),
    ),
    (
        C!(-2, 1),
        C!(-0.163_539_409_434_535_57, -0.153_124_575_537_122_97,),
    ),
    (
        C!(2, -1),
        C!(0.163_539_409_434_535_57, 0.153_124_575_537_122_97,),
    ),
    (
        C!(-2, -1),
        C!(-0.163_539_409_434_535_57, 0.153_124_575_537_122_97,),
    ),
    (
        C!(-28, 9),
        C!(-0.016_190_822_566_815_963, -0.005_210_224_203_359_059,),
    ),
    (
        C!(33, -21),
        C!(0.010_783_770_809_781_032, 0.006_866_888_783_433_775,),
    ),
    (
        C!(1e3, 1e3),
        C!(-0.580_861_681_919_673_6, 0.668_859_390_550_556_2,),
    ),
    #[cfg(not(feature = "native"))]
    // for some reason this give (NaN, NaN) with the native implementation
    (C!(-1000, -3001), C!(Inf, -Inf)),
    (
        C!(1e-8, 5.1e-3),
        C!(1.000_052_020_902_036e-8, 0.005_100_088_434_920_073,),
    ),
    (
        C!(4.95e-3, -4.9e-3),
        C!(0.004_950_156_837_581_592_5, -0.004_899_838_305_155_227,),
    ),
    (
        C!(5.1e-3, 5.1e-3),
        C!(0.005_100_176_864_319_676, 0.005_099_823_128_319_785,),
    ),
    (
        C!(0.5, 4.9e-3),
        C!(0.424_453_484_087_183_03, 0.002_820_278_933_186_814,),
    ),
    (
        C!(-0.5e1, 4.9e-4),
        C!(-0.102_134_073_327_104_65, -0.000_010_456_964_560_720_058,),
    ),
    (
        C!(-0.5e2, -4.9e-5),
        C!(-0.010_002_001_201_192_068, 9.805_885_888_237_42e-9,),
    ),
    (
        C!(0.5e3, 4.9e-6),
        C!(0.001_000_002_000_012, -9.800_058_800_588_007e-12,),
    ),
    (
        C!(0.5, 5.1e-3),
        C!(0.424_454_908_562_851_2, 0.002_935_393_851_311_701_4,),
    ),
    (
        C!(-0.5e1, 5.1e-4),
        C!(-0.102_134_073_235_711_72, -0.000_010_883_779_430_498_519,),
    ),
    (
        C!(-0.5e2, -5.1e-5),
        C!(-0.010_002_001_201_191_267, 1.020_612_612_857_282_3e-8,),
    ),
    (
        C!(1e-6, 2e-6),
        C!(1.000_000_000_007_333_4e-6, 2.000_000_000_001_333e-6,),
    ),
    (C!(2e-6, 0), C!(1.999_999_999_994_666_6e-6, 0)),
    (C!(2, 0), C!(0.301_340_388_923_791_95, 0)),
    (C!(20, 0), C!(0.025_031_367_926_403_67, 0)),
    (C!(200, 0), C!(0.002_500_031_251_171_948, 0)),
    (C!(0, 4.9e-3), C!(0, 0.004_900_078_433_419_939)),
    (C!(0, -5.1e-3), C!(0, -0.005_100_088_434_920_074)),
    (C!(0, 2e-6), C!(0, 2.000_000_000_005_333_3e-6)),
    (C!(0, -2), C!(0, -48.160_012_114_291_23)),
    (C!(0, 20), C!(0, 4.627_407_029_504_443_3e173)),
    (C!(0, -200), C!(0, -Inf)),
    (C!(Inf, 0), C!(0, 0)),
    (C!(-Inf, 0), C!(-0, 0)),
    (C!(0, Inf), C!(0, Inf)),
    (C!(0, -Inf), C!(0, -Inf)),
    (C!(Inf, Inf), C!(NaN, NaN)),
    (C!(Inf, -Inf), C!(NaN, NaN)),
    (C!(NaN, NaN), C!(NaN, NaN)),
    (C!(NaN, 0), C!(NaN, 0)),
    (C!(0, NaN), C!(0, NaN)),
    (C!(NaN, Inf), C!(NaN, NaN)),
    (C!(Inf, NaN), C!(NaN, NaN)),
    (
        C!(39, 6.4e-5),
        C!(0.012_824_731_484_894_337, -2.105_957_276_516_618_8e-8,),
    ),
    (
        C!(41, 6.09e-5),
        C!(0.012_198_752_534_236_345, -1.813_040_560_401_824_6e-8,),
    ),
    (
        C!(4.9e7, 5e-11),
        C!(1.020_408_163_265_306_3e-8, -1.041_232_819_658_476_3e-26,),
    ),
    (
        C!(5.1e7, 4.8e-11),
        C!(9.803_921_568_627_453e-9, -9.227_220_299_884_665e-27,),
    ),
    (C!(1e9, 2.4e-12), C!(5e-10, -1.2e-30,)),
    (C!(1e11, 2.4e-14), C!(5e-12, -1.2e-36,)),
    (C!(1e13, 2.4e-16), C!(5e-14, -1.2e-42,)),
    (C!(1e300, 2.4e-303), C!(5e-301, 0)),
];
